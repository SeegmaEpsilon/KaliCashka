import os
import re
import time
import paramiko
import subprocess
import requests
import json
from typing import Tuple
from .config import AI_API_KEY
from sqlalchemy.orm import Session
from .prompts import *
from .database import SessionLocal, get_db
from .models import ChatHistory, User, UserCreate
from .auth import get_password_hash

import asyncio, json
from fastapi import WebSocket
from typing import Dict, List

from langchain_core.messages import HumanMessage, SystemMessage, AIMessage


api_key = AI_API_KEY


class WebSocketManager:
    def __init__(self) -> None:
        self.active: Dict[str, List[WebSocket]] = {}

    async def connect(self, ws: WebSocket, user_id: str) -> None:
        await ws.accept()
        self.active.setdefault(user_id, []).append(ws)

    def disconnect(self, ws: WebSocket, user_id: str) -> None:
        if user_id in self.active and ws in self.active[user_id]:
            self.active[user_id].remove(ws)

    async def send(self, user_id: str, payload: dict | str) -> None:
        if isinstance(payload, str):
            payload = {"message": payload}
        # –î–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏ ‚Äí –≤—Å–µ–≥–¥–∞ —Å—Ç—Ä–æ–∫–∏ JSON
        text = json.dumps(payload, ensure_ascii=False)
        for ws in self.active.get(user_id, []):
            await ws.send_text(text)


ws_manager = WebSocketManager()


# services.py
async def _emit(user_id: str, stage: str, data: dict | str) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–æ–∫–µ—Ç 'ws_session', –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç user_id.
    """
    if isinstance(data, str):
        data = {"message": data}
    data["stage"] = stage

    # üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤ –∫–∞–Ω–∞–ª "ws_session"
    target_id = "ws_session"

    print(f"[WS ‚Üí {target_id}] {json.dumps(data, ensure_ascii=False)}", flush=True)

    await ws_manager.send(target_id, data)



def create_user(db: Session, user: UserCreate) -> User:
    hashed_password = get_password_hash(user.password)
    new_user = User(username=user.username, hashed_password=hashed_password)
    db.add(new_user)
    db.commit()
    db.refresh(new_user)
    return new_user


def save_chat_history(user_id: str, user_message: str, bot_response: str):
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    """
    db = SessionLocal()
    history = ChatHistory(user_id=user_id, user_message=user_message, bot_response=bot_response)
    db.add(history)
    db.commit()
    db.close()


def get_user_chat_history(user_id: int, db: Session, include_system_message: bool = True) -> list:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º SystemMessage.
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    history = db.query(ChatHistory).filter(ChatHistory.user_id == user_id).all()

    messages = []
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–æ, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
    if include_system_message:
        messages.append(
            SystemMessage(
                content="–¢—ã –æ–±—É—á–∞—é—â–∏–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–µ—Ç–µ–≤—ã—Ö –∞—Ç–∞–∫ –≤ —Ä–∞–º–∫–∞—Ö –æ–±—É—á–∞—é—â–∏—Ö —Ö–∞–∫–∞—Ç–æ–Ω–æ–≤."
                        "–¢—ã –¥–æ–ª–∂–µ–Ω –ø–æ–º–æ–≥–∞—Ç—å –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Å–µ—Ç–µ–≤—ã–µ –∞—Ç–∞–∫–∏."
                        "–¢–≤–æ—è –ø–æ–º–æ—â—å –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ –≤—ã–¥–∞—á–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∫–∞–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è Kali Linux –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏,"
                        "—á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —É—è–∑–≤–∏–º–æ—Å—Ç—å. –¢–∞–∫–∂–µ —Ç—ã –¥–æ–ª–∂–µ–Ω –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–∏—Ö –∫–æ–º–∞–Ω–¥ –∏ –¥–∞–≤–∞—Ç—å"
                        "–¥–∞–ª—å–Ω–µ–π—à–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."
            )
        )

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–≤–µ—Ç–æ–≤ –±–æ—Ç–∞
    for h in history:
        messages.append(HumanMessage(content=h.user_message))
        messages.append(AIMessage(content=h.bot_response))

    return messages


def remove_think_block(text: str) -> str:
    """
    –£–¥–∞–ª—è–µ—Ç –±–ª–æ–∫ <think>...</think> –∏–∑ —Ç–µ–∫—Å—Ç–∞.
    """
    return re.sub(r"<think>.*?</think>", "", text, flags=re.DOTALL).strip()


def send_message_to_ai(user_id: int, message: str, db: Session) -> str:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –º–æ–¥–µ–ª—å Novita AI –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞.
    """
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ (user_message –∏ bot_response)
        history = db.query(ChatHistory).filter(ChatHistory.user_id == user_id).all()

        # –ù–∞—á–∏–Ω–∞–µ–º —Å system-–ø–æ–¥—Å–∫–∞–∑–∫–∏
        formatted_messages = [{
            "role": "user",
            "content": (
                "–¢—ã –æ–±—É—á–∞—é—â–∏–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–µ—Ç–µ–≤—ã—Ö –∞—Ç–∞–∫ –≤ —Ä–∞–º–∫–∞—Ö –æ–±—É—á–∞—é—â–∏—Ö —Ö–∞–∫–∞—Ç–æ–Ω–æ–≤. "
                "–¢—ã –¥–æ–ª–∂–µ–Ω –ø–æ–º–æ–≥–∞—Ç—å –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Å–µ—Ç–µ–≤—ã–µ –∞—Ç–∞–∫–∏. –¢–≤–æ—è –ø–æ–º–æ—â—å –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ –≤—ã–¥–∞—á–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π, "
                "–∫–∞–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è Kali Linux –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —É—è–∑–≤–∏–º–æ—Å—Ç—å. –¢–∞–∫–∂–µ —Ç—ã –¥–æ–ª–∂–µ–Ω –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å "
                "—Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–∏—Ö –∫–æ–º–∞–Ω–¥ –∏ –¥–∞–≤–∞—Ç—å –¥–∞–ª—å–Ω–µ–π—à–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."
            )
        }]

        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ (user + assistant)
        for entry in history:
            formatted_messages.append({"role": "user", "content": entry.user_message})
            formatted_messages.append({"role": "assistant", "content": entry.bot_response})

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        formatted_messages.append({"role": "user", "content": message})

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        request_data = {
            "model": "deepseek/deepseek-r1-turbo",
            "messages": formatted_messages,
            "response_format": {"type": "text"}
        }

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
        base_url = "https://api.novita.ai/v3/openai/chat/completions"

        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {api_key}"
        }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = requests.post(base_url, headers=headers, data=json.dumps(request_data))

        if response.status_code != 200:
            raise Exception(f"–û—à–∏–±–∫–∞ HTTP {response.status_code}: {response.text}")

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
        res_json = response.json()
        model_response = res_json["choices"][0]["message"]["content"]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—Ç
        formatted_model_response = remove_think_block(model_response)

        save_chat_history(user_id, message, formatted_model_response)

        return formatted_model_response

    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å AI: {str(e)}"
        print(error_msg)
        return error_msg


def execute_command_on_kali(command: str, timeout: int = 60) -> Tuple[str, str]:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –Ω–∞ —É–¥–∞–ª—ë–Ω–Ω–æ–π –º–∞—à–∏–Ω–µ Kali Linux —á–µ—Ä–µ–∑ SSH —Å —Ç–∞–π–º-–∞—É—Ç–æ–º.
    """
    host = os.getenv("KALI_SSH_HOST")  # IP Kali Linux
    port = int(os.getenv("KALI_SSH_PORT"))  # –ü–æ—Ä—Ç SSH
    username = os.getenv("KALI_SSH_USER")  # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è SSH
    password = os.getenv("KALI_SSH_PASSWORD")  # –ü–∞—Ä–æ–ª—å SSH

    client = paramiko.SSHClient()
    client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    try:
        client.connect(host, port, username, password)
        stdin, stdout, stderr = client.exec_command(command)

        # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã —Å —Ç–∞–π–º-–∞—É—Ç–æ–º
        start_time = time.time()
        while True:
            if stdout.channel.exit_status_ready():
                break
            if time.time() - start_time > timeout:
                stdout.channel.close()
                stderr.channel.close()
                return "", "–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è."

            time.sleep(0.5)  # –ü–∞—É–∑–∞, —á—Ç–æ–±—ã –Ω–µ –Ω–∞–≥—Ä—É–∂–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä

        output = stdout.read().decode('utf-8').strip()
        error = stderr.read().decode('utf-8').strip()

        return output, error

    finally:
        client.close()


def is_ip_reachable(ip: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ IP-–∞–¥—Ä–µ—Å–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏ (—Å –ø–æ–º–æ—â—å—é ping).
    """
    try:
        # –ü–∏–Ω–≥ –¥–æ IP –¥–ª—è Linux/Unix
        result = subprocess.run(["ping", "-n", "1", ip], stdout=subprocess.PIPE, stderr=subprocess.PIPE)

        # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã == 0, –∑–Ω–∞—á–∏—Ç IP –¥–æ—Å—Ç—É–ø–µ–Ω
        return result.returncode == 0
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∏–Ω–≥–µ: {str(e)}")
        return False


def extract_command_and_stage_from_response(text: str) -> tuple[str, str] | None:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞ –∏ –∫–æ–º–∞–Ω–¥—É Linux –∏–∑ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏.
    –ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞ –≤ <...>, –∞ –∫–æ–º–∞–Ω–¥–∞ ‚Äî –≤ `` `–∫–æ–º–∞–Ω–¥–∞` ``.
    """
    # –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞ –≤ <...>
    stage_match = re.search(r'<(.*?)>', text)
    # –ò—â–µ–º –∫–æ–º–∞–Ω–¥—É –≤–Ω—É—Ç—Ä–∏ –æ–±—Ä–∞—Ç–Ω—ã—Ö –∫–∞–≤—ã—á–µ–∫
    command_match = re.search(r'`(.*?)`', text)

    if stage_match and command_match:
        # –ï—Å–ª–∏ –æ–±–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö
        stage_name = stage_match.group(1).strip()
        command = command_match.group(1).strip()
        return stage_name, command

    # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
    return None


def extract_result_from_response(analysis_response: str) -> str:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–Ω—É—Ç—Ä–∏ —Ç—Ä–µ—É–≥–æ–ª—å–Ω—ã—Ö —Å–∫–æ–±–æ–∫ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –æ—Ç–≤–µ—Ç–∞.
    –ü—Ä–∏–º–µ—Ä: "–†–µ–∑—É–ª—å—Ç–∞—Ç: <–æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è>" -> "–æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
    """
    match = re.search(r'<(.*?)>', analysis_response)
    return match.group(1) if match else ""


async def auto_pentest_loop(          # ‚Üê —Ç–µ–ø–µ—Ä—å async!
    target_info: str,
    service_name: str,
    user_id: str,
    db: Session,
    max_steps: int = 10,
) -> str:
    await _emit(user_id, "init", f"–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–ø–µ–Ω—Ç–µ—Å—Ç–∞ –ø—Ä–æ—Ç–∏–≤ {target_info}")

    start_msg = START_PENTEST_PROMPT.format(target_info=target_info,
                                            service_name=service_name)
    await _emit(user_id, "prompt", "–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–¥–µ–ª–∏")
    start_resp = send_message_to_ai(user_id, start_msg, db)
    await _emit(user_id, "prompt_response",
                extract_result_from_response(start_resp))

    if not is_ip_reachable(target_info):
        text = f"‚õî –¶–µ–ª—å {target_info} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
        await _emit(user_id, "unreachable", text)
        return text

    for step in range(max_steps):
        try:
            await _emit(user_id, "step_start", {"step": step + 1})

            cmd_resp = send_message_to_ai(user_id, GET_NEW_COMMAND_PROMPT, db)
            extract = extract_command_and_stage_from_response(cmd_resp)
            if not extract:
                await _emit(user_id, "no_command", "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞, –∑–∞–≤–µ—Ä—à–∞—é.")
                break
            stage_name, command = extract
            await _emit(user_id, "command", {"stage_name": stage_name,
                                             "command": command})

            output, error = execute_command_on_kali(command)
            result = output or error
            await _emit(user_id, "command_result",
                        {"stage_name": stage_name, "result": result})

            analysis_prompt = RESULT_COMMAND_ANALYSIS_PROMPT.format(
                current_command=command, result_command=result)
            analysis_resp = send_message_to_ai(user_id, analysis_prompt, db)
            analysis = extract_result_from_response(
                remove_think_block(analysis_resp))
            await _emit(user_id, "analysis",
                        {"stage_name": stage_name, "analysis": analysis})

            if "–ü–µ–Ω—Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω" in (cmd_resp + analysis_resp):
                await _emit(user_id, "complete", "–ü–µ–Ω—Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω ‚úÖ")
                break

        except Exception as exc:
            await _emit(user_id, "error",
                        f"–û—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ {step + 1}: {str(exc)}")
            break

    await _emit(user_id, "finished", "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ–Ω—Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω")
    return "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ–Ω—Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω"


async def test_ws_output(user_id: str):
    await _emit(user_id, "test", "–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ WS")
    return "–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ WS"





